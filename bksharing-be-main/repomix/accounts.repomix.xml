This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-18T17:55:25.204Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
- Pay special attention to the Repository Description. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>
<user_provided_header>
Custom header information for the packed file.
</user_provided_header>

For more information about Repomix, visit: https://github.com/yamadashy/repomix
</additional_info>

</file_summary>

<repository_structure>
src/
  domains/
    accounts/
      dto/
        account-change-password.dto.ts
        account-create.dto.ts
        account-detail.dto.ts
        account-update.dto.ts
      response/
        account.response.ts
      account.controller.ts
      account.service.ts
      accounts.module.ts
README.md
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path="src/domains/accounts/dto/account-change-password.dto.ts">
import { PasswordValidator } from 'src/shared/request-validator/account.validator';

export class AccountChangePasswordDTO {
  @PasswordValidator()
  currentPassword: string;

  @PasswordValidator()
  newPassword: string;
}
</file>

<file path="src/domains/accounts/dto/account-create.dto.ts">
import { AccountType, Gender } from '@prisma/client';
import { IsEnum, IsOptional, IsString } from 'class-validator';
import {
  AddressBaseValidator,
  AddressDetailValidator,
  EmailValidator,
  NameValidator,
  PasswordValidator,
  PhoneNumberValidator,
} from 'src/shared/request-validator/account.validator';
import { OnlyDate } from 'src/shared/request-validator/only-date.request-validator';

export class AccountCreateDTO {
  @EmailValidator()
  email: string;

  @PasswordValidator()
  password: string;

  @PhoneNumberValidator()
  phoneNumber: string;

  @IsEnum(AccountType)
  accountType: AccountType;

  @NameValidator()
  name: string;

  @IsEnum(Gender)
  gender: Gender;

  @OnlyDate()
  dob: Date;

  @IsString()
  @IsOptional()
  bio?: string;

  @IsOptional()
  @AddressBaseValidator()
  addressBase?: string;

  @IsOptional()
  @AddressDetailValidator()
  addressDetail?: string;
}
</file>

<file path="src/domains/accounts/dto/account-detail.dto.ts">
export type AccountDetailDTO = {
  email: string;
  phoneNumber: string;
};
</file>

<file path="src/domains/accounts/dto/account-update.dto.ts">
import { Gender, Prisma } from '@prisma/client';
import { IsEnum, IsOptional, IsString, MaxLength } from 'class-validator';
import { AuthUserDTO } from 'src/domains/auth/dto/auth-user.dto';
import { connectRelation } from 'src/shared/helpers/prisma.helper';
import { parsePrismaDate } from 'src/shared/parsers/datetime.parse';
import {
  AddressBaseValidator,
  AddressDetailValidator,
  EmailValidator,
  PhoneNumberValidator,
} from 'src/shared/request-validator/account.validator';
import { IdValidator } from 'src/shared/request-validator/id.validator';
import { OnlyDate } from 'src/shared/request-validator/only-date.request-validator';

export class AccountUpdateDTO {
  @IsString()
  @IsOptional()
  name?: string;

  @EmailValidator()
  @IsOptional()
  email?: string;

  @PhoneNumberValidator()
  @IsOptional()
  phoneNumber?: string;

  @IsOptional()
  @AddressBaseValidator()
  addressBase?: string;

  @AddressDetailValidator()
  @IsOptional()
  addressDetail?: string;

  @IsString()
  @IsOptional()
  @MaxLength(1000)
  bio?: string;

  @IdValidator()
  @IsOptional()
  avatarId?: number;

  @IsEnum(Gender)
  @IsOptional()
  gender?: Gender;

  @OnlyDate()
  @IsOptional()
  dob?: string;

  static toUpdate(user: AuthUserDTO, body: AccountUpdateDTO): Prisma.AccountUpdateArgs {
    return {
      where: { id: user.accountId },
      data: {
        name: body.name,
        email: body.email,
        gender: body.gender,
        bio: body.bio,
        phoneNumber: body.phoneNumber,
        addressBase: body.addressBase,
        addressDetail: body.addressDetail,
        dob: body.dob && parsePrismaDate(body.dob),
        Avatar: body.avatarId && connectRelation(body.avatarId),
      },
      select: { id: true },
    };
  }
}
</file>

<file path="src/domains/accounts/response/account.response.ts">
import { ImageRESP } from 'src/domains/image/response/image.response';
import { parsePrismaDateToEpoch } from 'src/shared/parsers/datetime.parse';

export class AccountRESP {
  id: number;
  name: string;
  email: string;
  phoneNumber: string;
  gender: string;
  dob: string;
  addressBase: string | null;
  addressDetail: string | null;
  thumbnail?: ImageRESP;

  static fromEntity(e: AccountRESP, thumbnail?: ImageRESP): AccountRESP {
    return {
      id: e.id,
      name: e.name,
      email: e.email,
      gender: e.gender,
      phoneNumber: e.phoneNumber,
      dob: String(parsePrismaDateToEpoch(e.dob)),
      addressBase: e.addressBase,
      addressDetail: e.addressDetail,
      thumbnail,
    };
  }
}
</file>

<file path="src/domains/accounts/account.controller.ts">
import { Body, Controller, Get, Patch, Post, Req, UseGuards } from '@nestjs/common';
import { AccountService } from 'src/domains/accounts/account.service';
import { AccountChangePasswordDTO } from 'src/domains/accounts/dto/account-change-password.dto';
import { AccountUpdateDTO } from 'src/domains/accounts/dto/account-update.dto';
import { AccountRESP } from 'src/domains/accounts/response/account.response';
import { AuthRequestDTO } from 'src/domains/auth/dto/auth-request.dto';
import { BaseResponse } from 'src/shared/generics/base.response';
import { AuthJwtGuard } from '../auth/auth-jwt.guard';

@Controller('accounts')
@UseGuards(AuthJwtGuard)
export class AccountController {
  constructor(private readonly accountService: AccountService) {}

  @Get('me')
  async get(@Req() req: AuthRequestDTO) {
    const { account, thumbnail } = await this.accountService.getMe(req.user.accountId);

    return BaseResponse.of(
      AccountRESP.fromEntity(
        {
          ...account,
          dob: String(account.dob),
        },
        thumbnail,
      ),
    );
  }

  @Patch('me')
  async update(@Req() req: AuthRequestDTO, @Body() body: AccountUpdateDTO) {
    const response = await this.accountService.updateAccount(req.user, body);
    return BaseResponse.of(response.id);
  }

  @Post('change-password')
  async changePassword(@Req() req: AuthRequestDTO, @Body() body: AccountChangePasswordDTO) {
    const response = await this.accountService.changePassword(req.user.accountId, body);

    return BaseResponse.of(response);
  }
}
</file>

<file path="src/domains/accounts/account.service.ts">
import { Injectable } from '@nestjs/common';
import bcrypt from 'bcrypt';

import { AccountStatus } from '@prisma/client';
import { TransactionHost } from 'src/services/prisma/transactions/transaction-host';
import { ActionFailed, ActionFailedException } from 'src/shared/exceptions/action-failed.exception';
import { AccountErrorMessages } from 'src/shared/messages/error-messages';
import { AuthUserDTO } from '../auth/dto/auth-user.dto';
import { ImageService } from '../image/image.service';
import { AccountChangePasswordDTO } from './dto/account-change-password.dto';
import { AccountCreateDTO } from './dto/account-create.dto';
import { AccountUpdateDTO } from './dto/account-update.dto';

@Injectable()
export class AccountService {
  private readonly HASH_ROUND = 10;
  constructor(
    private readonly transactionHost: TransactionHost,
    private readonly imageService: ImageService,
  ) {}

  async getMe(accountId: number) {
    const account = await this.transactionHost.tx.account.findUnique({
      where: { id: accountId },
      select: {
        id: true,
        name: true,
        email: true,
        gender: true,
        phoneNumber: true,
        dob: true,
        accountType: true,
        addressBase: true,
        addressDetail: true,
        avatarId: true,
      },
    });

    const thumbnail = await this.imageService.getImageOriginal(account.avatarId);

    return { account, thumbnail };
  }

  async createAccount(body: AccountCreateDTO) {
    const account = await this.transactionHost.tx.account.create({
      data: {
        name: body.name,
        gender: body.gender,
        email: body.email,
        dob: body.dob,
        bio: body.bio,
        password: this.hashPassword(body.password),
        phoneNumber: body.phoneNumber,
        accountType: body.accountType,
        addressBase: body.addressBase,
        addressDetail: body.addressDetail,
        status: AccountStatus.DEACTIVE,
      },
      select: { id: true, avatarId: true, name: true, email: true, accountType: true, status: true },
    });

    return account;
  }

  async updateAccount(user: AuthUserDTO, body: AccountUpdateDTO) {
    const account = await this.transactionHost.tx.account.findUnique({
      where: { id: user.accountId },
      select: { id: true },
    });

    if (!account) throw new ActionFailedException(ActionFailed.ACCOUNT_NOT_FOUND, AccountErrorMessages.MSG01);

    if (body.avatarId) {
      await this.imageService.linkImageToAccount(user.accountId, body.avatarId);
    }

    if (body.email) {
      const existedAccount = await this.transactionHost.tx.account.findFirst({
        where: { email: body.email, id: { not: user.accountId } },
        select: { id: true },
      });

      if (existedAccount) {
        throw new ActionFailedException(ActionFailed.ACCOUNT_EMAIL_EXISTED, AccountErrorMessages.MSG02);
      }
    }

    if (body.phoneNumber) {
      const existedAccount = await this.transactionHost.tx.account.findFirst({
        where: { phoneNumber: body.phoneNumber, id: { not: user.accountId } },
        select: { id: true },
      });

      if (existedAccount) {
        throw new ActionFailedException(ActionFailed.ACCOUNT_PHONE_NUMBER_EXISTED, AccountErrorMessages.MSG03);
      }
    }

    return await this.transactionHost.tx.account.update(AccountUpdateDTO.toUpdate(user, body));
  }

  async changePassword(accountId: number, body: AccountChangePasswordDTO) {
    await this.checkCurrentPassword(accountId, body.currentPassword);

    return await this.transactionHost.tx.account.update({
      where: { id: accountId },
      data: { password: this.hashPassword(body.newPassword) },
      select: { id: true },
    });
  }

  async resetPassword(accountId: number, password: string) {
    return await this.transactionHost.tx.account.update({
      where: { id: accountId },
      data: { password: this.hashPassword(password) },
      select: { id: true },
    });
  }

  async checkCurrentPassword(id: number, currentPassword: string) {
    const account = await this.transactionHost.tx.account.findUniqueOrThrow({
      where: { id: id },
      select: { password: true },
    });

    const isMatch = this.verifyPassword(currentPassword, account.password);
    if (!isMatch) {
      throw new ActionFailedException(ActionFailed.INCORRECT_PASSWORD, AccountErrorMessages.MSG04);
    }
  }

  hashPassword(password: string) {
    return bcrypt.hashSync(password, this.HASH_ROUND);
  }

  verifyPassword(password: string, savedPassword: string) {
    return bcrypt.compareSync(password, savedPassword);
  }
}
</file>

<file path="src/domains/accounts/accounts.module.ts">
import { Module } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { AccountController } from 'src/domains/accounts/account.controller';
import { CommonModule } from 'src/services/common.module';
import { AccountService } from './account.service';

@Module({
  imports: [CommonModule],
  providers: [AccountService, JwtService],
  exports: [AccountService],
  controllers: [AccountController],
})
export class AccountModule {}
</file>

<file path="README.md">
<p align="center">
  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="120" alt="Nest Logo" /></a>
</p>

[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456
[circleci-url]: https://circleci.com/gh/nestjs/nest

  <p align="center">A progressive <a href="http://nodejs.org" target="_blank">Node.js</a> framework for building efficient and scalable server-side applications.</p>
    <p align="center">
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/v/@nestjs/core.svg" alt="NPM Version" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/l/@nestjs/core.svg" alt="Package License" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/dm/@nestjs/common.svg" alt="NPM Downloads" /></a>
<a href="https://circleci.com/gh/nestjs/nest" target="_blank"><img src="https://img.shields.io/circleci/build/github/nestjs/nest/master" alt="CircleCI" /></a>
<a href="https://coveralls.io/github/nestjs/nest?branch=master" target="_blank"><img src="https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#9" alt="Coverage" /></a>
<a href="https://discord.gg/G7Qnnhy" target="_blank"><img src="https://img.shields.io/badge/discord-online-brightgreen.svg" alt="Discord"/></a>
<a href="https://opencollective.com/nest#backer" target="_blank"><img src="https://opencollective.com/nest/backers/badge.svg" alt="Backers on Open Collective" /></a>
<a href="https://opencollective.com/nest#sponsor" target="_blank"><img src="https://opencollective.com/nest/sponsors/badge.svg" alt="Sponsors on Open Collective" /></a>
  <a href="https://paypal.me/kamilmysliwiec" target="_blank"><img src="https://img.shields.io/badge/Donate-PayPal-ff3f59.svg" alt="Donate us"/></a>
    <a href="https://opencollective.com/nest#sponsor"  target="_blank"><img src="https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg" alt="Support us"></a>
  <a href="https://twitter.com/nestframework" target="_blank"><img src="https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow" alt="Follow us on Twitter"></a>
</p>
  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->

## Description

[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.

## Project setup

```bash
$ yarn install
```

## Compile and run the project

```bash
# development
$ yarn run start

# watch mode
$ yarn run start:dev

# production mode
$ yarn run start:prod
```

## Run tests

```bash
# unit tests
$ yarn run test

# e2e tests
$ yarn run test:e2e

# test coverage
$ yarn run test:cov
```

## Resources

Check out a few resources that may come in handy when working with NestJS:

- Visit the [NestJS Documentation](https://docs.nestjs.com) to learn more about the framework.
- For questions and support, please visit our [Discord channel](https://discord.gg/G7Qnnhy).
- To dive deeper and get more hands-on experience, check out our official video [courses](https://courses.nestjs.com/).
- Visualize your application graph and interact with the NestJS application in real-time using [NestJS Devtools](https://devtools.nestjs.com).
- Need help with your project (part-time to full-time)? Check out our official [enterprise support](https://enterprise.nestjs.com).
- To stay in the loop and get updates, follow us on [X](https://x.com/nestframework) and [LinkedIn](https://linkedin.com/company/nestjs).
- Looking for a job, or have a job to offer? Check out our official [Jobs board](https://jobs.nestjs.com).

## Support

Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).

## Stay in touch

- Author - [Kamil Myśliwiec](https://twitter.com/kammysliwiec)
- Website - [https://nestjs.com](https://nestjs.com/)
- Twitter - [@nestframework](https://twitter.com/nestframework)

## License

Nest is [MIT licensed](https://github.com/nestjs/nest/blob/master/LICENSE).
# bksharing-be
</file>

</repository_files>
