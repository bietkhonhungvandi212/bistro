services:

  nginx:
    image: nginx:1.27.1
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./webserver/nginx/app.conf:/etc/nginx/conf.d/app.conf:ro
      - ./webserver/certbot/conf:/etc/letsencrypt
      - ./webserver/certbot/www:/var/www/certbot
    depends_on:
      - bksharing
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - bksharing-network

  certbot:
    image: certbot/certbot:v2.10.0
    restart: unless-stopped
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./webserver/certbot/conf:/etc/letsencrypt:rw
      - ./webserver/certbot/www:/var/www/certbot:rw
    networks:
      - bksharing-network

  bksharing:
    image: nvtuanqti212/bksharing-server:latest
    labels: [ "com.centurylinklabs.watchtower.scope=bksharing-image" ]
    container_name: bksharing
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bksharing-network
  
  recommendation:
    image: nvtuanqti212/bksharing-rec-sys:latest
    labels: [ "com.centurylinklabs.watchtower.scope=bksharing-image" ]
    ports:
      - 8080:8082
    container_name: recommendation 
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bksharing-network

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --scope bksharing-image
    labels: [ "com.centurylinklabs.watchtower.scope=bksharing-image" ] 
    networks:
      - bksharing-network

  postgres:
    image: postgres:16.3
    restart: always
    ports: 
      - 5433:5432
    environment:
      POSTGRES_DB: bksharing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - bksharing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  adminer:
    image: adminer:4.8.1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bksharing-network

volumes:
  postgres:
    driver: local

networks:
  bksharing-network:
    driver: bridge
